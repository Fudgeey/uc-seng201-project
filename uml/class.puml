@startuml
'https://plantuml.com/class-diagram

class Tower implements Purchasable {
    - resourceType: Resource
    - productionUnits: int
    - reloadSpeed: int
    - experience: int
    - cost: int
    - name: string

    + Tower(resourceType: Resource)
    + Tower(resourceType: Resource, name: String)
    + applyUpgrade(upgrade: Upgrade): void
    + getLevel(): int
    + addExperience(experience: int): void
    + levelDown(): void
    + increaseProductionUnits(): void
    + decreaseReloadSpeed(): void
    + getSellPrice(): int
}

enum Resource {
    WATER
    WOOD
    FOOD
}

class GameManager {
    - name: string
    - money: int
    - experience: int
    - inventory: Inventory
    - roundCount: Integer
    - currentRound: Integer
    - roundDifficulty: RoundDifficulty
    - carts: List<Cart>
    - gameDifficulty: GameDifficulty
    - trackDistance: int

    + GameManager()
    + addMoney(money: int): void
    + removeMoney(money: int): void
    + addExperience(experience: int): void
    + getLevel(): int
    + addCart(cart: Cart): void
    + prepareRound(): void
    + startRound(): void

}

Tower --> Resource
GameManager --> GameDifficulty
GameManager --> RoundDifficulty
GameManager *- Inventory
Inventory o- Tower
Inventory o- Upgrade
Inventory o- Purchasable

class Cart {
    - size: int
    - speed: int
    - type: Resource
    - currentFilled: int

    + Cart(size: int, speed: int, type: Resource)
    + addCurrentFilled(amount: int): void
    + fill(tower: Tower, trackDistance: int): int
}

Cart --> Resource
GameManager *- Cart

enum GameDifficulty {
    EASY
    MEDIUM
    HARD
}

enum RoundDifficulty {
    EASY
    MEDIUM
    HARD
}

interface Purchasable {
    - purchased: boolean

    + getSellPrice(): int
}

abstract Upgrade implements Purchasable {
    - cost: int
    - name: String

    + Upgrade(cost: int, name:String)
    + apply(tower: Tower): void
    + getDescription(): string
}

class ProductionUpgrade extends Upgrade {
    - units: int

    + ProductionUpgrade(units: int)
}

class ReloadSpeedUpgrade extends Upgrade {
    + ReloadSpeedUpgrade()
}

class ResourceTypeUpgrade extends Upgrade {
    + ResourceTypeUpgrade()
}

class RepairTowerUpgrade extends Upgrade {
    + RepairTowerUpgrade()
}

class Inventory {
    - activeTowers: List<Tower>
    - reserveTowers: List<Tower>
    - upgrades: List<Upgrade>

    + Inventory()
    + addActiveTower(tower: Tower): void
    + removeActiveTower(tower: Tower): void
    + addReserveTower(tower: Tower): void
    + removeReserveTower(tower: Tower): void
    + addUpgrade(upgrade: Upgrade): void
    + removeUpgrade(upgrade: Upgrade): void
    + addItem(item: Purchasable): void
    + moveTower(tower: Tower): void
}

class EndService {
    - gameManager: GameManager

    + EndService(gameManager: GameManager)
    + closeGame(): void
}

class GameService {
    - gameManager: GameManager

    + GameService(gameManager: GameManager)
    + startRound(): void
    + prepareRound(): void
    + runRandomEvents(): void
    + openEndScreen(): void
    + openPauseScreen(): void
    + openInventoryScreen(): void
}

class InventoryService {
    - gameManager: GameManager
    - selectedTower: Tower
    - selectedUpgrade: Upgrade

    + InventoryService(gameManager: GameManager)
    + moveTower(tower: Tower): void
    + applyUpgrade(): void
    + sellItem(): void
    + openGameScreen(): void
    + openShopScreen(): void
}

class SetupService {
    - gameManager: GameManager
    - startingTowers: Tower[]

    + SetupService(gameManager: GameManager)
    + startGame(): void
    + findNextSlot(array: Tower[]): int
}

class ShopService {
    - gameManager: GameManager

    + ShopService(gameManager: GameManager)
    + openInventoryScreen(): void
    + buyItem(item: Purchasable): void
}

EndService -* GameManager
GameService -* GameManager
InventoryService -* GameManager
SetupService -* GameManager
ShopService -* GameManager
@enduml